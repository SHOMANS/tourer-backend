generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(cuid())
  email      String        @unique
  password   String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  firstName  String?
  isActive   Boolean       @default(true)
  lastName   String?
  role       UserRole      @default(USER)
  googleId   String?       @unique
  photoUrl   String?
  provider   AuthProvider? @default(LOCAL)
  providerId String?
  bookings   Booking[]
  reviews    Review[]

  @@map("users")
}

model Package {
  id               String      @id @default(cuid())
  title            String
  description      String?
  price            Decimal     @db.Decimal(10, 2)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  availableFrom    DateTime?
  availableTo      DateTime?
  category         Category    @default(ADVENTURE)
  coordinates      String?
  country          String?
  coverImage       String?
  currency         String      @default("USD")
  difficulty       Difficulty  @default(EASY)
  duration         Int         @default(1)
  excludes         String[]
  highlights       String[]
  images           String[]
  includes         String[]
  isActive         Boolean     @default(true)
  isAvailable      Boolean     @default(true)
  itinerary        Json?
  maxGuests        Int         @default(10)
  minAge           Int?
  originalPrice    Decimal?    @db.Decimal(10, 2)
  rating           Float?      @default(0)
  reviewCount      Int         @default(0)
  shortDescription String?
  slug             String?     @unique
  tags             String[]
  locationName     String      @default("TBD")
  pricingType      PricingType @default(PER_PERSON)
  bookings         Booking[]
  locationDetail   Location?
  reviews          Review[]

  @@map("packages")
}

model Booking {
  id            String        @id @default(cuid())
  userId        String
  packageId     String
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  contactInfo   Json?
  currency      String        @default("USD")
  endDate       DateTime?
  guestNames    String[]
  guests        Int           @default(1)
  notes         String?
  paymentId     String?
  paymentStatus PaymentStatus @default(PENDING)
  startDate     DateTime      @default(now())
  totalPrice    Decimal       @default(0) @db.Decimal(10, 2)
  package       Package       @relation(fields: [packageId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews       Review[]

  @@map("bookings")
}

model CarouselItem {
  id          String     @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  actionType  ActionType @default(INTERNAL)
  actionValue String
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("carousel_items")
}

model Review {
  id           String   @id @default(cuid())
  userId       String
  packageId    String
  bookingId    String?
  rating       Int
  title        String?
  comment      String?
  images       String[]
  isVerified   Boolean  @default(false)
  isApproved   Boolean  @default(true)
  helpfulVotes Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  booking      Booking? @relation(fields: [bookingId], references: [id])
  package      Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Location {
  id           String   @id @default(cuid())
  packageId    String   @unique
  name         String
  address      String?
  city         String?
  state        String?
  country      String?
  zipCode      String?
  latitude     Float
  longitude    Float
  description  String?
  instructions String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  package      Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@map("locations")
}

enum UserRole {
  USER
  ADMIN
}

enum AuthProvider {
  LOCAL
  GOOGLE
  FACEBOOK
  APPLE
}

enum Category {
  ADVENTURE
  CULTURAL
  NATURE
  HISTORICAL
  BEACH
  MOUNTAIN
  CITY
  WILDLIFE
  LUXURY
  BUDGET
  FAMILY
  ROMANTIC
}

enum Difficulty {
  EASY
  MODERATE
  CHALLENGING
  EXTREME
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum ActionType {
  INTERNAL
  EXTERNAL
}

enum PricingType {
  PER_PERSON
  PER_GROUP
  PER_COUPLE
  FLAT_RATE
}
